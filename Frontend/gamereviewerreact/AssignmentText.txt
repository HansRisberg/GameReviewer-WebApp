Timeframe
â€¢ To be agreed upon between participant and Academic work.
â€¢ Suggestion: Minimum 1 week / 5 days. Depending on the planned content, could be
extended to 2-3 weeks.
Coding languages & tools needed
â€¢ GitHub
â€¢ Fitting IDEs for your chosen languages.
â€¢ A back-end language you have learned: C#, Java, ...
â€¢ Some front-end languages you have learned: HTML & CSS + TypeScript/JavaScript + possibly
a framework like React, Vue or Angular.
â€¢ SQL database.
â€¢ OR/M framework fit for language and database.
â€¢ Unit test framework.

Task checklist
â€¢ Project and code should be managed through GitHub. (Important, do not skip this step!)
â€¢ Use the back end & front-end languages taught at your program.
â€¢ Include a front-end framework (the one used in your program, for example React) if you feel
this will enhance your project and webpage.
â€¢ Use an OR/M to integrate a database with your back-end.
â€¢ Integrate at least 1 third-party API in your project (for example: google maps).
â€¢ User test your GUI.
â€¢ Unit test your business logic and back-end code. Example: In a unit test (technically an
"integration test"), use an OR/M method to add a row to a table in the DB. Then fetch the
row and compare the result's contents to your expected contents. Following the same setup,
test your business logic and other database CRUD (create, read, update, delete) operations
as well.
â€¢ Add a short, written description or list of what you have done in your project and why.
â€¢ Your hand-in will be presented for and evaluated by one of your program teachers (or
another experienced developer).

Task description
Develop a webpage. The webpage should have functionality that includes collecting user input,
storing it in an SQL database and retrieving it on the user's request. Think user experience and
usability. The operations you implement should make sense for your chosen domain.
You are free to choose what domain you want to work on. Some examples: Fictional online shop,
course-and-student register, a self-made blogging system, a company web-page... your choice!

NOTE #1: It should model a well-known domain, so the person evaluating the hand-in has a general
idea of what to expect and how it should work.
NOTE #2: If you follow a guide/tutorial, make sure you deviate from it: Make several adjustments
and implementations with your own design.
Remember the timeframe you agree with Academic Work on (5 days or more) and figure out the
amount of content and details from there. Some guidelines on what to include:
â€¢ Web-UI that allows the user to choose actions. Think about UX, create meaningful
operations.
â€¢ You can choose most of the content yourself, but make sure you cover all of CRUD:
o Create (input data)
o Read (retrieve data, special request on this one: good search functionality)
o Update (alter data)
o Delete (remove data)
â€¢ Several database tables, including at least one M:M relationship (with M:M connection-table
if needed).
â€¢ Follow clean code design! (Refactor as appropriate during your work.)
â€¢ Try to incorporate some advanced techniques you have learned. For example:
Multithreading ("async") is a nice feature!
Remember the goal of the exercise: To strengthen your developer skills and your CV. ðŸ˜Š